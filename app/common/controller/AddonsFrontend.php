<?php
/**
 * FunAadmin
 * ============================================================================
 * 版权所有 2017-2028 FunAadmin，并保留所有权利。
 * 网站地址: https://www.FunAadmin.com
 * ----------------------------------------------------------------------------
 * 采用最新Thinkphp6实现
 * ============================================================================
 * Author: yuege
 * Date: 2019/9/21
 */

namespace app\common\controller;
use app\backend\service\AuthService;
use app\common\traits\Jump;
use fun\addons\Controller;
use think\App;
use think\exception\ValidateException;
use think\facade\Cookie;
use think\facade\Lang;
use think\facade\View;
use think\helper\Str;

class AddonsFrontend extends Controller
{
    use Jump;

    /**
     * @var
     * 入口
     */
    protected $entrance;

    /**
     * @var
     * 模型
     */
    protected $modelClass;
    /**
     * @var
     * 页面大小
     */
    protected $pageSize;
    /**
     * @var
     * 页数
     */
    protected $page;

    /**
     * 模板布局, false取消
     * @var string|bool
     */
    protected $layout = false;

    /**
     * 快速搜索时执行查找的字段
     */
    protected $searchFields = 'id';
    /**
     * 允许修改的字段
     */
    protected $allowModifyFields = [
        'status',
        'title',
    ];


    public function __construct(App $app)
    {
        parent::__construct($app);

        //过滤参数
        $this->request->filter('trim,strip_tags,htmlspecialchars');
        $this->pageSize = input('limit', 15);
        //加载语言包
        $this->loadlang(strtolower($this->controller));
        $this->_initialize();
    }

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->entrance = config('entrance.backendEntrance');
        [$modulename, $controllername, $actionname] = [$this->module, $this->controller, $this->action];
        $controllername = str_replace('\\','.',$controllername);
        $controllers = explode('.', $controllername);
        $jsname = '';
        foreach ($controllers as $vo) {
            empty($jsname) ? $jsname = strtolower(parse_name($vo,1)) : $jsname .= '/' . strtolower(parse_name($vo,1));
        }
        $controllername = strtolower(parse_name($controllername,1));
        $actionname = strtolower(parse_name($actionname));
        $requesturl = "addons/{$modulename}/{$controllername}/{$actionname}";
        $autojs = file_exists(app()->getRootPath()."public".DS."static".DS.'addons'.DS."{$this->addon}".DS."{$modulename}".DS."js".DS."{$jsname}.js") ? true : false;
        $jspath ="addons/{$this->addon}/{$modulename}/js/{$jsname}.js";
        $auth = new AuthService();
        $authNode = $auth->nodeList();
        $config = [
            'entrance'    => $this->entrance,//入口
            'modulename'    => $modulename,
            'addonname'    => $this->addon,
            'moduleurl'    => rtrim(url("/{$modulename}", [], false), '/'),
            'controllername'       =>$controllername,
            'actionname'           => $actionname,
            'requesturl'          => $requesturl,
            'jspath' => "{$jspath}",
            'autojs'           => $autojs,
            'authNode'           => $authNode,
            'superAdmin'           => session('admin.id')==1,
            'lang'           =>  strip_tags( Lang::getLangset()),
            'site'           =>  syscfg('site'),
            'upload'           =>  syscfg('upload'),
            'editor'           =>  syscfg('editor'),

        ];
        View::assign('config',$config);
    }



    protected function validate(array $data, $validate, array $message = [], bool $batch = false)
    {
        try {
            parent::validate($data, $validate, $message, $batch);
            $this->checkToken();
        } catch (ValidateException $e) {
            $this->error($e->getMessage(),'',['token'=>$this->request->buildToken()]);
        }
        return true;
    }

    /**
     * 检测token 并刷新
     *
     */
    protected function checkToken()
    {
        $check = $this->request->checkToken('__token__', $this->request->param());
        if (false === $check) {
            $this->error(lang('Token verify error'), '', ['token' => $this->request->buildToken()]);
        }
    }
    //自动加载语言
    protected function loadlang($name)
    {
        $lang = Cookie::get('think_lang');
        Lang::load([
            $this->addon_path.$this->addon.DS.$this->module.DS . 'lang' . DS . $lang . DS . str_replace('.', '/', $name) . '.php'
        ]);
    }


    /**
     * 刷新Token
     */
    protected function token()
    {
        $check = $this->request->checkToken('__token__', $this->request->param());
        if (false === $check) {
            $this->error(lang('Token verification error'), '', ['__token__' => $this->request->buildToken()]);
        }
        //刷新Token
        $this->request->buildToken();
    }





}