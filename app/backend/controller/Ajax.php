<?php

// +----------------------------------------------------------------------
// | EasyAdmin
// +----------------------------------------------------------------------
// | PHP交流群: 763822524
// +----------------------------------------------------------------------
// | 开源协议  https://mit-license.org 
// +----------------------------------------------------------------------
// | github开源项目：https://github.com/zhongshaofa/EasyAdmin
// +----------------------------------------------------------------------

namespace app\backend\controller;

use app\backend\model\AuthRule;
use app\common\controller\Backend;
use app\backend\lib\Auth;
use app\common\model\Attach as AttachModel;
use app\common\traits\Curd;
use speed\helper\DataHelper;
use speed\helper\FileHelper;
use think\App;
use think\captcha\facade\Captcha;
use think\facade\Cache;
use think\facade\Lang;
use think\helper\Str;

class Ajax extends Backend
{

    use Curd;

    //上传验证规则
    protected $uploadValidate = [
        'file' => 'filesize:102400|fileExt:jpg,png,gif,jpeg,rar,zip,avi,mp4,rmvb,3gp,flv,mp3,txt,doc,xls,ppt,pdf,xls,docx,xlsx,doc'
    ];
    protected $imageValidate = [
        'image' => 'filesize:10240|fileExt:jpg,png,gif,jpeg,bmp,svg,webp'

    ];
    protected $videoValidate = [
        'video' => 'filesize:10240|avi,rmvb,3gp,flv,mp4'

    ];
    protected $voiceValidate = [
        'voice' => 'filesize:2048|mp3,wma,wav,amr'

    ];
    protected $driver = 'lcoal';
    public function initialize()

    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $fileExt = getConfigByCode('upload_file_type');
        $filemax = getConfigByCode('upload_file_max')*1024;
        $this->imageValidate = ['image'=>
            'filesize'.$filemax.'|'.$fileExt,
        ];
    }

    public function __construct(App $app)
    {
        parent::__construct($app);
        $this->modelClass = new AttachModel();

    }

    /**
     * 初始化后台接口地址
     * @return \think\response\Json
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\DbException
     * @throws \think\db\exception\ModelNotFoundException
     */
    public function initInfo()
    {
        $admin_id =  session('admin.id');
        $cacheData = Cache::get('initInfo' . $admin_id);
        if (!empty($cacheData)) {
            return json($cacheData);
        }
        $menus = Cache::get('adminMenus_'.$admin_id);
        if(!$menus){
            $cate = AuthRule::where('menu_status',1)->order('sort asc')->select()->toArray();
            $menus =(new Auth())->authMenu($cate);
            cache('adminMenus_'.$admin_id,$menus,['expire'=>3600]);
        }
        $href = url('index/console');
        $home = ["href"=>$href,"icon"=>"fa fa-home","title"=>"首页"];
        $logoInfo = ["title"=> "SpeedAdmin", "image"=> "", "href"=>"https://www.speedadmin.cn"];
        $data =['clearInfo'=>url('ajax/clearData'),'menuInfo'=>$menus,'homeInfo'=>$home,'logoInfo'=>$logoInfo];
        Cache::set('initInfo' . $admin_id ,$data,3600);
        return json($data);
    }

    /**
     * @return \think\response\Jsonp
     * 自动加载语言函数
     */
    public function lang(){
        header('Content-Type: application/javascript');
        $controllername = input("controllername");
        $controllername = parse_name($controllername);
        //大写变小写
        $controllername = strtolower(Str::camel($controllername));
        //默认只加载了控制器对应的语言名，你还根据控制器名来加载额外的语言包
        $this->loadlang($controllername);

        return jsonp(Lang::get(), 200, [], ['json_encode_param' => JSON_FORCE_OBJECT | JSON_UNESCAPED_UNICODE]);
    }
    /**
     * 上传类
     * @return \think\response\Json
     */
    public function uploads(){
        //获取上传文件表单字段名
        $type = input('type','file');
        $path = input('path','uploads');
        $file =request()->file('file') ? request()->file('file'): request()->file('upfile');
        $file_size = $file->getSize();
        $md5 = $file->md5();
        $sha1 = $file->sha1();;
        $file_mime = $file->getMime();
        $attach =  $this->modelClass->where('md5',$md5)->find();
        if(!$attach){
            try {
                switch ($type=='file'){
                    case 'file':
                        $validate = $this->uploadValidate;
                        break;
                    case 'image':
                        $validate = $this->imageValidate;
                        break;
                    case 'video':
                        $validate = $this->videoValidate;
                        break;
                    case 'voice' :
                        $validate = $this->voiceValidate;
                        break;
                    default:
                        $validate = $this->uploadValidate;

                }
                validate($validate)
                    ->check(DataHelper::objToArray($file));
                $savename = \think\facade\Filesystem::disk('public')->putFile($path, $file);
                $path = '/storage/' . $savename;
            } catch (\think\exception\ValidateException $e) {
                $path = '';
                $error = $e->getMessage();
            }
            $file_ext =  strtolower(substr($savename, strrpos($savename, '.') + 1));
            $file_name = basename($savename);
            $width = $height = 0;
            if (in_array($file_mime, ['image/gif', 'image/jpg', 'image/jpeg', 'image/bmp', 'image/png', 'image/webp']) || in_array($file_ext, ['gif', 'jpg', 'jpeg', 'bmp', 'png', 'webp'])) {
                $imgInfo = getimagesize($file->getPathname());
                ;
                if (!$imgInfo || !isset($imgInfo[0]) || !isset($imgInfo[1])) {
                    $this->error(lang('Uploaded file is not a valid image'));
                }
                $width = isset($imgInfo[0]) ? $imgInfo[0] : $width;
                $height = isset($imgInfo[1]) ? $imgInfo[1] : $height;
            }
            if (!empty($path)) {
                $data = [
                    'admin_id'=>session('admin.id'),
                    'name'=>$file_name,
                    'path'=>$path,
                    'thumb'=>$path,
                    'url'=>$this->request->domain().$path,
                    'ext'=>$file_ext,
                    'size'=>$file_size/1024,
                    'width'=>$width,
                    'height'=>$height,
                    'md5'=>$md5,
                    'sha1'=>$sha1,
                    'mime'=>$file_mime,
                    'driver'=>$this->driver,

                ];
                $attach = AttachModel::create($data);
                $result['code'] = 1;
                $result['state'] = 'SUCCESS'; //兼容百度
                $result['id'] =$attach->id;
                $result["url"] = $path;
                $result['msg'] = lang('upload success');
                return json($result);
            } else {
                //上传失败获取错误信息
                $result['url'] = '';
                $result['msg'] = $error;
                $result['code'] = 0;
                $result['state'] = 'ERROR'; //兼容百度
                return json($result);
            }

        }else{
            $result['state'] = 'SUCCESS'; //兼容百度
            $result['code'] = 1;
            $result['id'] =$attach->id;
            //分辨是否截图上传，截图上传只能上传一个，非截图上传可以上传多个
            $result["url"] = $attach->path;
            $result['msg'] = lang('upload success');
            return json($result);
        }

    }

    //获取图片列表
    public function getList(){
        $path = input('path','uploads');
        $paths = app()->getRootPath().'public/storage/'.$path;
        $type = input('type','image');
        $list = FileHelper::getFileList($paths,$type);
        $data = ['state'=>'SUCCESS','start'=>0,'total'=>count($list),'list'=>[]];
        if($list){
            foreach ($list[0] as $k=>$v) {
                $data['list'][$k]['url'] = str_replace( app()->getRootPath().'public','',$v);
                $data['list'][$k]['mtime'] = mime_content_type($v);
            }
        }
        return json($data);
    }

    /*
      * 清除缓存
      */
    public function clearData(){
        $dir = app()->getRootPath().'runtime/backend';
        Cache::clear();
        if(FileHelper::delDir($dir) ){
            $this->success('清除成功');
        }
    }



}